[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
on_source = ['unite.vim', 'vimshell.vim']

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = 'call echodoc#enable()'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = 'context_filetype.vim'
if = "has('lua')"
on_event = 'InsertEnter'
hook_source = '''
  let g:neocomplete#enable_at_startup = 1
  source ~/.vim/rc/plugins/neocomplete.rc.vim
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
if = 0
hook_source = '''
  "imap <silent>L     <Plug>(neosnippet_jump_or_expand)
  "smap <silent>L     <Plug>(neosnippet_jump_or_expand)
  "xmap <silent>L     <Plug>(neosnippet_expand_target)
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1

  " let g:snippets_dir = '~/.vim/snippets/,~/.vim/bundle/snipmate/snippets/'
  let g:neosnippet#snippets_directory = '~/.cache/dein/repos/github.com/honza/vim-snippets/snippets'
'''

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
hook_source = 'source ~/.vim/rc/plugins/unite.rc.vim'

[[plugins]]
repo ='kristijanhusak/defx-icons'

[[plugins]]
repo ='kristijanhusak/defx-git'
hook_add = '''
  let g:defx_git#indicators = {
    \ 'Modified'  : '+',
    \ 'Staged'    : '●',
    \ 'Untracked' : '?',
    \ 'Renamed'   : '➜',
    \ 'Unmerged'  : '═',
    \ 'Deleted'   : 'x',
    \ 'Unknown'   : '?'
    \ }
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
depends = ['defx-icons', 'defx-git']
hook_add = '''
nnoremap <silent>   [Space]t
\ :<C-u>Defx -listed -resume -split=vertical -winwidth=30 -direction=topleft -buffer-name=tab`tabpagenr()` -search=`expand('%:p')`<CR>
'''
hook_source = '''
function! Root(path) abort
    return fnamemodify(a:path, ':t')
  endfunction
  call defx#custom#source('file', {
      \ 'root': 'Root',
      \})
  call defx#custom#column('filename', {
      \ 'directory_icon': '',
      \ 'opened_icon': '',
      \ })
  call defx#custom#column('mark', {
      \ 'readonly_icon': '✗',
      \ 'selected_icon': '✓',
      \ })
  call defx#custom#option('_', {
      \ 'columns': 'indent:git:icons:filename',
      \ 'show_ignored_files': 1,
      \ })
'''
[plugins.ftplugin]
defx = '''
" Define mappings
nnoremap <silent><buffer><expr> <CR>
\ defx#async_action('drop')
nnoremap <silent><buffer><expr> c
\ defx#do_action('copy')
nnoremap <silent><buffer><expr> !
\ defx#do_action('execute_command')
nnoremap <silent><buffer><expr> m
\ defx#do_action('move')
nnoremap <silent><buffer><expr> p
\ defx#do_action('paste')
nnoremap <silent><buffer><expr> l
\ defx#async_action('open')
nnoremap <silent><buffer><expr> E
\ defx#do_action('open', 'vsplit')
nnoremap <silent><buffer><expr> P
\ defx#do_action('open', 'pedit')
nnoremap <silent><buffer><expr> o
\ defx#async_action('open_or_close_tree')
nnoremap <silent><buffer><expr> O
\ defx#async_action('open_tree_recursive')
nnoremap <silent><buffer><expr> K
\ defx#do_action('new_directory')
nnoremap <silent><buffer><expr> N
\ defx#do_action('new_file')
nnoremap <silent><buffer><expr> M
\ defx#do_action('new_multiple_files')
nnoremap <silent><buffer><expr> C
\ defx#do_action('toggle_columns', 'mark:filename:type:size:time')
nnoremap <silent><buffer><expr> S
\ defx#do_action('toggle_sort', 'Time')
nnoremap <silent><buffer><expr> se
\ defx#do_action('add_session')
nnoremap <silent><buffer><expr> sl
\ defx#do_action('load_session')
nnoremap <silent><buffer><expr> d
\ defx#do_action('remove_trash')
nnoremap <silent><buffer><expr> r
\ defx#do_action('rename')
nnoremap <silent><buffer><expr> x
\ defx#do_action('execute_system')
nnoremap <silent><buffer><expr> >
\ defx#do_action('toggle_ignored_files')
nnoremap <silent><buffer><expr> .
\ defx#do_action('repeat')
nnoremap <silent><buffer><expr> yy
\ defx#do_action('yank_path')
nnoremap <silent><buffer><expr> h
\ defx#async_action('cd', ['..'])
nnoremap <silent><buffer><expr> ~
\ defx#async_action('cd')
nnoremap <silent><buffer><expr> \
\ defx#do_action('cd', getcwd())
nnoremap <silent><buffer><expr> q
\ defx#do_action('quit')
nnoremap <silent><buffer><expr> <Space>
\ defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> *
\ defx#do_action('toggle_select_all')
nnoremap <silent><buffer><expr> j
\ line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k
\ line('.') == 1 ? 'G' : 'k'
nnoremap <silent><buffer><expr> <C-l>
\ defx#do_action('redraw')
xnoremap <silent><buffer><expr> <CR>
\ defx#do_action('toggle_select_visual')
nnoremap <silent><buffer><expr> <C-g>
\ defx#do_action('print')
nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ?
\ ':<C-u>wincmd w<CR>' :
\ ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = 'neomru.vim'
on_cmd = 'Denite'
hook_source = 'source ~/.vim/rc/plugins/denite.rc.vim'
hook_add = '''
  nnoremap <silent> ;r
        \ :<C-u>Denite -buffer-name=register
        \ register neoyank<CR>
  xnoremap <silent> ;r
        \ :<C-u>Denite -default-action=replace -buffer-name=register
        \ register neoyank<CR>

  "nnoremap <silent> [Window]<Space>
  "      \ :<C-u>Denite file/rec:~/.vim/rc<CR>

  nnoremap <silent> [Space]l :<C-u>Denite -buffer-name=search
        \ line<CR>

  nnoremap <silent> [Space]* :<C-u>DeniteCursorWord -buffer-name=search
        \ line<CR>

  nnoremap <silent> [Space]f :<C-u>DeniteBufferDir file/rec/current -buffer-name=search<CR>

  nnoremap <silent> [Space]n :<C-u>Denite file/point
        \ `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`<CR>

  nnoremap <silent> [Space]s :<C-u>Denite file/rec<CR>

  nnoremap <silent><expr> tt  &filetype == 'help' ?  "g\<C-]>" :
        \ ":\<C-u>DeniteCursorWord -buffer-name=tag -immediately
        \  tag:include\<CR>"

  "nnoremap <silent><expr> tp  &filetype == 'help' ?
  "      \ ":\<C-u>pop\<CR>" : ":\<C-u>Denite jump\<CR>"

  "nnoremap <silent> [Window]n :<C-u>Denite dein<CR>
  "nnoremap <silent> [Window]g :<C-u>Denite ghq<CR>

  " no-empty grepの結果が空ならばバッファを閉じる
  nnoremap <silent> [Space]gp :<C-u>Denite -no-empty grep<CR>

  nnoremap <silent> [Space]gc :<C-u>DeniteCursorWord -no-empty grep<CR>

  nnoremap <silent> [Space]r :<C-u>Denite -buffer-name=search
        \ -resume -refresh<CR>

  nnoremap <silent> ft :<C-u>Denite filetype<CR>

  "nnoremap <silent> <C-t> :<C-u>Denite
  "      \ -select=`tabpagenr()-1` deol<CR>

  "nnoremap <silent> <C-k> :<C-u>Denite change jump<CR>

  "nnoremap <silent> [Space]gs :<C-u>Denite gitstatus<CR>
  nnoremap <silent> [Space];;
        \ :<C-u>Denite command command_history<CR>
  "file history
  nnoremap <silent> [Space]e
        \ :<C-u>Denite file_mru<CR>

  nnoremap <silent> [Space]b
        \ :<C-u>Denite buffer<CR>

  "nnoremap <silent> [Space]o
  "      \ :<C-u>Denite outline -no-quit<CR>
"  nnoremap <silent> [Space]dw
"        \ :<C-u>Denite unite:dwm<CR>

  " Define mappings
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> a
    \ denite#do_map('choose_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> '
    \ denite#do_map('quick_move')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
    nnoremap <silent><buffer><expr> r
    \ denite#do_map('do_action', 'quickfix')
    nnoremap <silent><buffer><expr> <C-r>
    \ denite#do_map('restore_sources')
    nnoremap <silent><buffer><expr> w
    \ denite#do_map('do_action', 'vsplit')
  endfunction

  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
  endfunction
'''

#[[plugins]]
#repo = 'Shougo/vimfiler.vim'
#depends = 'unite.vim'
#on_map = {n = '<Plug>'}
#on_if = "isdirectory(bufname('%'))"
#hook_add = 'nnoremap <silent>   [Space]v   :<C-u>VimFiler -invisible<CR>'
#hook_source = '''
#call vimfiler#custom#profile('default', 'context', {
#      \ 'safe' : 0,
#      \ 'auto_expand' : 1,
#      \ 'parent' : 0,
#      \ })
#
#let g:vimfiler_as_default_explorer = 1
#if IsWindows()
#  let g:vimfiler_detect_drives = [
#        \ 'C:/', 'D:/', 'E:/', 'F:/', 'G:/', 'H:/', 'I:/',
#        \ 'J:/', 'K:/', 'L:/', 'M:/', 'N:/']
#  " Use trashbox.
#  let g:unite_kind_file_use_trashbox = 1
#else
#  " Like Textmate icons.
#  let g:vimfiler_tree_leaf_icon = ' '
#  let g:vimfiler_tree_opened_icon = '▾'
#  let g:vimfiler_tree_closed_icon = '▸'
#  let g:vimfiler_file_icon = ' '
#  let g:vimfiler_readonly_file_icon = '✗'
#  let g:vimfiler_marked_file_icon = '✓'
#endif
#
#autocmd MyAutoCmd FileType vimfiler call s:vimfiler_my_settings()
#function! s:vimfiler_my_settings() abort "{{{
#  nmap <buffer> <Tab> <Plug>(vimfiler_switch_to_other_window)
#endfunction"}}}
#'''

#[[plugins]]
#repo = 'Shougo/vimshell.vim'
#on_map = {n = '<Plug>'}
#on_if = "!has('nvim')"
#hook_add = 'nmap [Space]s  <Plug>(vimshell_switch)'
#hook_source = 'source ~/.vim/rc/plugins/vimshell.rc.vim'

#[[plugins]]
#repo = 'Shougo/junkfile.vim'
#on_source = 'denite.vim'
#hook_add = '''
#  nnoremap <silent> [Window]e :<C-u>Denite junkfile:new junkfile<CR>
#'''

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

#[[plugins]]
#repo = 'Shougo/neoinclude.vim'
#on_if = 1

#[[plugins]]
#repo = 'Shougo/vinarise.vim'
#on_cmd = 'Vinarise'
#hook_add = 'let g:vinarise_enable_auto_detect = 1'

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {x = '<Plug>'}
hook_add = '''
  xmap I  <Plug>(niceblock-I)
  xmap A  <Plug>(niceblock-A)
'''

[[plugins]]
repo = 'vim-jp/vital.vim'

#[[plugins]]
#repo = 'ctrlpvim/ctrlp.vim'

[[plugins]]
repo = 'LeafCage/foldCC'
on_ft = 'vim'

[[plugins]]
repo = 'thinca/vim-fontzoom'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap + <Plug>(fontzoom-larger)
  nmap _ <Plug>(fontzoom-smaller)
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft = ['unite', 'qf']
hook_source = '''
  autocmd MyAutoCmd FileType qf nnoremap <buffer> r :<C-u>Qfreplace<CR>
'''

[[plugins]]
repo = 'thinca/vim-scouter'

[[plugins]]
repo = 'thinca/vim-ref'
on_map = {n = '<Plug>'}
hook_source = '''
  let g:ref_cache_dir = expand('$CACHE/ref')
  let g:ref_use_vimproc = 1
  if IsWindows()
    let g:ref_refe_encoding = 'cp932'
  endif

  autocmd MyAutoCmd FileType ref call s:ref_my_settings()
  function! s:ref_my_settings() abort "{{{
    " Overwrite settings.
    nmap <buffer> [Tag]t  <Plug>(ref-keyword)
    nmap <buffer> [Tag]p  <Plug>(ref-back)
    nnoremap <buffer> <TAB> <C-w>w
  endfunction"}}}
'''

#[[plugins]]
#repo = 'basyura/J6uil.vim'
#on_if = 'has("gui_running")'
#depends = 'webapi-vim'
#hook_source = '''
#  let g:J6uil_config_dir = expand('$CACHE/J6uil')
#  let g:J6uil_no_default_keymappings = 1
#  let g:J6uil_display_offline  = 0
#  let g:J6uil_display_online   = 0
#  let g:J6uil_echo_presence    = 1
#  let g:J6uil_display_icon     = 1
#  let g:J6uil_display_interval = 0
#  let g:J6uil_updatetime       = 1000
#  let g:J6uil_align_message    = 0
#
#  autocmd MyAutoCmd FileType J6uil call s:j6uil_settings()
#  autocmd MyAutoCmd FileType J6uil_say call s:j6uil_say_settings()
#
#  function! s:j6uil_settings() abort
#    setlocal wrap
#    setlocal nofoldenable
#    setlocal foldcolumn=0
#    nmap <buffer> o <Plug>(J6uil_open_say_buffer)
#    nmap <silent> <buffer> <CR> <Plug>(J6uil_action_enter)
#  endfunction
#
#  function! s:j6uil_say_settings() abort
#    setlocal wrap
#    setlocal nofoldenable
#    setlocal foldcolumn=0
#  endfunction
#'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
hook_add = '''
  function! InitCaw() abort
    if !&l:modifiable
      silent! nunmap <buffer> gc
      silent! xunmap <buffer> gc
      silent! nunmap <buffer> gcc
      silent! xunmap <buffer> gcc
    else
      nmap <buffer> gc <Plug>(caw:prefix)
      xmap <buffer> gc <Plug>(caw:prefix)
      nmap <buffer> gcc <Plug>(caw:hatpos:toggle)
      xmap <buffer> gcc <Plug>(caw:hatpos:toggle)
    endif
  endfunction
  autocmd MyAutoCmd FileType * call InitCaw()
  call InitCaw()
'''

#[[plugins]]
#repo = 'tyru/eskk.vim'
#on_map = {ic = '<Plug>'}
#hook_add = '''
#  imap <C-j>     <Plug>(eskk:toggle)
#  cmap <C-j>     <Plug>(eskk:toggle)
#'''
#hook_source = '''
#  let g:eskk#directory = expand('$CACHE/eskk')
#  let g:eskk#keep_state = 0
#  let g:eskk#debug = 0
#  let g:eskk#show_annotation = 1
#  let g:eskk#rom_input_style = 'msime'
#  let g:eskk#egg_like_newline = 1
#  let g:eskk#egg_like_newline_completion = 1
#  let g:eskk#tab_select_completion = 1
#  let g:eskk#start_completion_length = 2
#  let g:eskk#dictionary = {
#        \   'path': expand('$CACHE/skk-jisyo'),
#        \   'sorted': 0,
#        \   'encoding': 'utf-8',
#        \}
#  let g:eskk#large_dictionary = {
#        \   'path': '/usr/share/skk/SKK-JISYO.L',
#        \   'sorted': 1,
#        \   'encoding': 'euc-jp',
#        \}
#
#  if $TERM !~# '^rxvt' && has('nvim')
#    " Use <> instead of ▽.
#    let g:eskk#marker_henkan = '<>'
#    " Use >> instead of ▼.
#    let g:eskk#marker_henkan_select = '>>'
#  endif
#
#  autocmd MyAutoCmd User eskk-initialize-post
#        \ EskkMap -remap jj <ESC>
#  autocmd MyAutoCmd User eskk-initialize-pre call s:eskk_initial_pre()
#  function! s:eskk_initial_pre() abort "{{{
#    let t = eskk#table#new('rom_to_hira*', 'rom_to_hira')
#    call t.add_map('z ', '　')
#    call t.add_map('~', '〜')
#    call t.add_map('zc', '©')
#    call t.add_map('zr', '®')
#    call t.add_map('z9', '（')
#    call t.add_map('z0', '）')
#    call eskk#register_mode_table('hira', t)
#  endfunction "}}}
#'''

[[plugins]]
repo = 'tyru/open-browser.vim'

#[[plugins]]
#repo = 'eagletmt/neco-ghc'
#on_ft = 'haskell'
#external_commands = 'ghc-mod'

#[[plugins]]
#repo = 'eignn/netrw.vim'
#on_cmd = 'Explore'

#[[plugins]]
#repo = 'rhysd/accelerated-jk'
#on_map = {n = '<Plug>'}
#hook_add = '''
#  nmap <silent>j <Plug>(accelerated_jk_gj)
#  nmap <silent>k <Plug>(accelerated_jk_gk)
#'''

#[[plugins]]
#repo = 'aharisu/vim-gdev'
#on_ft = 'scheme'

#[[plugins]]
#repo = 'fatih/vim-go'
#on_ft = 'go'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>sa <Plug>(operator-surround-append)a
  nmap <silent>sd <Plug>(operator-surround-delete)a
  nmap <silent>sr <Plug>(operator-surround-replace)a
  nmap <silent>sc <Plug>(operator-surround-replace)a
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap J <Plug>(jplus)
'''

[[plugins]]
repo = 'katono/rogue.vim'

# [[plugins]]
# repo = 'lambdalisue/vim-gita'
# hook_add = '''
#   nnoremap <silent> [Space]gs  :<C-u>Gita status<CR>
#   nnoremap <silent> [Space]gc  :<C-u>Gita commit<CR>
#
#   autocmd FileType gita-status
#   \ nmap <buffer> cc    <Plug>(gita-commit-open)
#   autocmd FileType gita-status
#   \ nmap <buffer> cA    <Plug>(gita-commit-open-amend)
# '''

[[plugins]]
repo = 'davidhalter/jedi-vim'
if = "!has('nvim')"
on_ft = 'python'
hook_source = '''
  let g:jedi#completions_enabled = 0
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#smart_auto_mappings = 0
  let g:jedi#show_call_signatures = 0
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_add = '''
  let g:rustfmt_autosave = 1
  nnoremap <Leader>rr :<C-u>Crun<CR>
  "nnoremap <Leader>ra :<C-u>RustTest!<CR>
  "nnoremap <Leader>rt :<C-u>RustTest<CR>
  nnoremap <Leader>ra :<C-u>RustTest! -- --test-threads=1<CR>
  nnoremap <Leader>rt :<C-u>RustTest -- --test-threads=1<CR>
'''

[[plugins]]
repo = 'rhysd/rust-doc.vim'
on_ft = 'rust'

#[[plugins]]
#repo = 'artur-shaik/vim-javacomplete2'
#on_ft = 'java'
#hook_source = '''
#  autocmd MyAutoCmd FileType java setlocal omnifunc=javacomplete#Complete
#'''

[[plugins]]
repo = 'lambdalisue/vim-findent'

[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'

# 自動的に文字を追加
#[[plugins]]
#repo = 'kana/vim-smartchr'
#on_event = 'InsertCharPre'
#hook_source = '''
#  inoremap <expr> , smartchr#one_of(', ', ',')
#  inoremap <expr> =
#        \ search('\(&\<bar><bar>\<bar>+\<bar>-\<bar>/\<bar>>\<bar><\) \%#', 'bcn')? '<bs>= '
#        \ : search('\(*\<bar>!\)\%#', 'bcn') ? '= '
#        \ : smartchr#one_of(' = ', '=', ' == ')
#  augroup MyAutoCmd
#    " Substitute .. into -> .
#    autocmd FileType c,cpp inoremap <buffer> <expr> .
#          \ smartchr#loop('.', '->', '...')
#    autocmd FileType vim inoremap <buffer> <expr> .
#          \ smartchr#loop('.', ' . ', '..', '...')
#    autocmd FileType lisp,scheme,clojure inoremap <buffer> <expr> = =
#
#    autocmd FileType haskell,int-ghci
#          \ inoremap <buffer> <expr> + smartchr#loop('+', ' ++ ')
#          \| inoremap <buffer> <expr> - smartchr#loop('-', ' -> ', ' <- ')
#          \| inoremap <buffer> <expr> $ smartchr#loop(' $ ', '$')
#          \| inoremap <buffer> <expr> \ smartchr#loop('\ ', '\')
#          \| inoremap <buffer> <expr> : smartchr#loop(':', ' :: ', ' : ')
#          \| inoremap <buffer> <expr> . smartchr#loop('.', ' . ', '..')
#  augroup END
#'''

[[plugins]]
repo = 'tweekmonster/impsort.vim'
on_cmd = 'ImpSort'
hook_source = 'let g:impsort_highlight_imported = 0'

[[plugins]]
repo = 'tweekmonster/helpful.vim'
on_cmd = 'HelpfulVersion'

#[[plugins]]
#repo = 'Jagua/vim-denite-ghq'
#on_source = 'denite.nvim'

[[plugins]]
repo = 'ciaranm/securemodelines'
on_event = 'BufRead'

#[[plugins]]
#repo = 'rhysd/vim-gfm-syntax'
#on_event = 'BufRead'

#[[plugins]]
#repo = 'machakann/vim-vimhelplint'
#on_ft = 'help'
#hook_source = '''
#  autocmd MyAutoCmd FileType
#  \ help nnoremap <silent><buffer> ,r  :<C-u>VimhelpLint!<CR>
#'''

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = 'rust'
hook_source = '''
  let $RUST_SRC_PATH = expand('~/.multirust/toolchains/'
  \ .'nightly-x86_64-unknown-linux-gnu/'
  \ .'lib/rustlib/src/rust/src/')
'''

#javascritp
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = 'javascript'

[[plugins]]
repo = 'ternjs/tern_for_vim'
build = 'npm install'
on_ft = 'javascript'

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
on_ft = 'javascript'
hook_source = '''
nnoremap <F12> :<C-u>TernDef<CR>
" Use tern_for_vim.
let g:tern#command = ["tern"]
let g:tern#arguments = ["--persistent"]
"Add extra filetypes
let g:deoplete#sources#ternjs#filetypes = [
                \ 'jsx',
                \ 'javascript.jsx',
                \ 'vue',
                \ '...'
                \ ]
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

#HTML
[[plugins]]
repo = 'othree/html5.vim'
on_ft = 'html'

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'vue']

#CSS
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = 'css'

#less
[[plugins]]
repo = 'groenewege/vim-less'
on_ft = 'less'

#markdown
[[plugins]]
repo = 'godlygeek/tabular'
on_ft = 'markdown'

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
hook_source = '''
  let g:vim_markdown_toc_autofit = 1
  let g:vim_markdown_conceal = 0
  let g:tex_conceal = ""
  let g:vim_markdown_math = 1
  let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'previm/previm'
on_ft = 'markdown'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'

[[plugins]]
repo = 'aserebryakov/vim-todo-lists'
on_ft = 'todo'
hook_source = '''
let g:VimTodoListsCustomKeyMapper = 'VimTodoListsCustomMappings'

function! VimTodoListsCustomMappings()
  nnoremap <buffer> s :VimTodoListsToggleItem<CR>
  nnoremap <buffer> <Space> :VimTodoListsToggleItem<CR>
  noremap <buffer> <leader>e :silent call VimTodoListsSetItemMode()<CR>
endfunction

let g:VimTodoListsDatesEnabled = 1
let g:VimTodoListsDatesFormat = "%F"
'''

[[plugins]]
repo = 'Shougo/dein.vim'

# [[plugins]]
# repo = 'godlygeek/csapprox'
# if = "v:progname !=# 'gvim' && has('gui') && !has('nvim')"
# hook_add = '''
# " Convert colorscheme in Konsole.
#  let g:CSApprox_konsole = 1
#  let g:CSApprox_attr_map = { 'bold' : 'bold', 'italic' : '', 'sp' : '' }
# '''

# [[plugins]]
# repo = 'thinca/vim-guicolorscheme'
# if = "v:progname !=# 'gvim' && !has('gui') && !has('nvim')"

[[plugins]]
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'reedes/vim-lexical'
hook_add = '''
let g:lexical#spell = 1
'''

#[[plugins]]
#repo = 'osyo-manga/vim-precious'
#depends = ['context_filetype.vim']
#hook_add = '''
#" カーソル位置から前後 300行の範囲で判定を行う
#let g:context_filetype#search_offset = 300
#'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

#[[plugins]]
#repo = 'kana/vim-filetype-haskell'

#[[plugins]]
#repo = 'mxw/vim-jsx'

#[[plugins]]
#repo = 'itchyny/vim-haskell-indent'

#[[plugins]]
#repo = 'udalov/kotlin-vim'

#[[plugins]]
#repo = 'shawncplus/phpcomplete.vim'

[[plugins]]
repo = 'jiangmiao/simple-javascript-indenter'

#[[plugins]]
#repo = 'thinca/vim-ft-diff_fold'

#[[plugins]]
#repo = 'thinca/vim-ft-help_fold'

#[[plugins]]
#repo = 'vim-jp/cpp-vim'

[[plugins]]
repo = 'elzr/vim-json'
hook_add = '''
let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'vim-jp/autofmt'

[[plugins]]
repo = 'kana/vim-textobj-user'

#[[plugins]]
#repo = 'hynek/vim-python-pep8-indent'

# Operators
[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'


# [[plugins]]
# repo = 'marijnh/tern_for_vim'
# build = 'npm install'

[[plugins]]
repo = 'vim-ruby/vim-ruby'

[[plugins]]
repo = 'tpope/vim-rails'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'honza/vim-snippets'
if = 0

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

#[[plugins]]
#repo = 'osyo-manga/unite-vimpatches'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'

[[plugins]]
repo = 'dart-lang/dart-vim-plugin'

#[[plugins]]
#repo = 'JesseKPhillips/d.vim'

#[[plugins]]
#repo = 'nsf/gocode'
#rtp = 'vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'kballard/vim-fish'

#[[plugins]]
#repo = 'Shougo/neossh.vim'

#[[plugins]]
#repo = 'thinca/vim-themis'

#[[plugins]]
#repo = 'tsukkee/unite-tag'

#[[plugins]]
repo = 'Shougo/unite-outline'

[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'

[[plugins]]
repo = 'chemzqm/denite-git'

[[plugins]]
repo = 'flazz/vim-colorschemes'

[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'szw/vim-g'

[[plugins]]
repo = 'othree/eregex.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'osyo-manga/vim-brightest'
hook_add = '''
" ハイライトするグループ名を設定
" アンダーラインで表示する
  let g:brightest#highlight = {
  \   "group" : "BrightestUnderline"
  \}
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap <Leader>s <Plug>(easymotion-overwin-f2)
vmap <Leader>s <Plug>(easymotion-bd-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)
let g:EasyMotion_do_mapping = 0
'''

#[[plugins]]
#repo = 'spolu/dwm.vim'

# dwmが動作しなくなる？
#[[plugins]]
#repo = 'kannokanno/unite-dwm'
#depends = ['dwm.vim', 'unite.vim']

[[plugins]]
repo = 'junegunn/vim-easy-align'

[[plugins]]
repo = 'airblade/vim-rooter'

#[[plugins]]
#repo = 'skywind3000/asyncrun.vim'

#[[plugins]]
#repo = 'vim-syntastic/syntastic'
#hook_add = '''
#set statusline+=%#warningmsg#
#set statusline+=%{SyntasticStatuslineFlag()}
#set statusline+=%*
#
#let g:syntastic_always_populate_loc_list = 1
#let g:syntastic_auto_loc_list = 1
#let g:syntastic_check_on_open = 1
#let g:syntastic_check_on_wq = 0
#
#"let g:syntastic_rust_checkers = ['rustc']
#let g:syntastic_rust_checkers = ['cargo']
#'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'

[[plugins]]
repo = 'scrooloose/nerdtree'

hook_add = '''
map <F2> :NERDTreeToggle<CR>
'''

#[[plugins]]
#repo = 'dense-analysis/ale'
#hook_add = '''
#let g:ale_fixers = {
#\   'javascript': ['eslint'],
#\   'ruby': ['rubocop'],
#\}
#let g:ale_lint_on_text_changed = 0
#let g:ale_linters = {
#      \ 'javascript': ['eslint'],
#      \ 'ruby': ['rubocop'],
#      \ 'html': ['tidy'],
#      \ 'css': ['csslint'],
#      "\ 'rust': ['cargo', 'rls', 'rustc', 'clippy', 'rustfmt'],
#      \ }
#let g:ale_linters_explicit = 1
#"audo fixing
#let g:ale_fix_on_save = 1
#nmap <silent> <F9> <Plug>(ale_next_wrap)
#nmap <silent> <F8> <Plug>(ale_previous_wrap)
#" Enable completion where available.
#let g:ale_completion_enabled = 1
#"Show sign column
#let g:ale_sign_column_always = 1
#
#"set statusline+=%#warningmsg#
#set statusline+=%{ALEGetStatusLine()}
#"#set statusline+=%*
#'''

#[[plugins]]
#repo = 'iyuuya/denite-ale'
#hook_add = '''
#nnoremap <silent> [Space]a :<C-u>Denite ale -buffer-name=search<CR>
#'''

#[[plugins]]
#repo = 'autozimu/LanguageClient-neovim'
#rev = 'next'
#build = 'bash install.sh'
#hook_add = '''
#" Required for operations modifying multiple buffers like rename.
#set hidden
#
#let g:LanguageClient_serverCommands = {
#    \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
#    \ 'vue': ['vls'],
#    \ 'javascript': ['javascript-typescript-stdio'],
#    \ 'typescript': ['javascript-typescript-stdio'],
#    \ 'ruby': ['solargraph', 'stdio'],
#    \ }
#
#let g:LanguageClient_autoStart = 1
#nnoremap <F6> :call LanguageClient_contextMenu()<CR>
#nnoremap <silent> <Leader>lh :call LanguageClient#textDocument_hover()<CR>
#nnoremap <silent> <Leader>ld :call LanguageClient#textDocument_definition()<CR>
#nnoremap <silent> <Leader>lr :call LanguageClient#textDocument_rename()<CR>
#nnoremap <silent> <Leader>lf :call LanguageClient#textDocument_formatting()<CR>
#'''

[[plugins]]
repo = 'haya14busa/vim-open-googletranslate'

#[[plugins]]
#repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = '0'
rev = 'release'
hook_add = '''
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <C-d> <Plug>(coc-range-select)
xmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>q  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() :
'''

#[[plugins]]
#repo = 'neoclide/coc-denite'

[[plugins]]
repo = 'dbgx/lldb.nvim'
hook_add='''
nmap <M-b> <Plug>LLBreakSwitch
vmap <S-F2> <Plug>LLStdInSelected
nnoremap <S-F4> :LLstdin<CR>
nnoremap <F5> :LLmode debug<CR>
nnoremap <S-F5> :LLmode code<CR>
nnoremap <F8> :LL continue<CR>
nnoremap <S-F8> :LL process interrupt<CR>
nnoremap <F9> :LL print <C-R>=expand('<cword>')<CR>
vnoremap <F9> :<C-U>LL print <C-R>=lldb#util#get_selection()<CR><CR>
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add='''
let g:rainbow_active = 1
'''
